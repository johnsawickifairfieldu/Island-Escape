//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IslandEscape
{
    using System;

    public partial class SavdGameState
    {
        private bool? isPlayable;

        /// <summary>
        /// The ID of this saved game state.
        /// </summary>
        public long Id { get; set; }

        /// <summary>
        /// The GameID associated with this saved game state.
        /// </summary>
        public int GameId { get; set; }

        /// <summary>
        /// The UserID associated with this saved game state.
        /// </summary>
        public string UserId { get; set; }

        /// <summary>
        /// When this game state was saved.
        /// </summary>
        public System.DateTime Saved { get; set; }

        /// <summary>
        /// The progress of the user's game at the time it was saved. A value between 0 and 101.
        /// </summary>
        public int Progress { get; set; }

        /// <summary>
        /// A game state is playable if it is not complete and is the user's most recent save for that game.
        /// </summary>
        public bool IsPlayable
        {
            get
            {
                if (this.isPlayable == null)
                {
                    if (Progress >= 100)
                    {
                        this.isPlayable = false;
                    }
                    else
                    {

                        DateTime max_datetime = DateTime.MinValue;

                        using (var db = new IslandEscapeOfficialEntities())
                        {

                            foreach (SavdGameState saved_game_state in db.SavdGameStates)
                            {
                                if (saved_game_state.Saved > max_datetime && saved_game_state.GameId == this.GameId && saved_game_state.UserId == this.UserId)
                                {
                                    max_datetime = saved_game_state.Saved;
                                }
                            }

                        }

                        this.isPlayable = max_datetime == this.Saved;
                    }
                }

                return this.isPlayable.Value;
            }
        }

        /// <summary>
        /// The game for this saved game state.
        /// </summary>
        public virtual Game Game { get; set; }

        /// <summary>
        /// The user for this saved game state.
        /// </summary>
        public virtual User User { get; set; }
    }
}
